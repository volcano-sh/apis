/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "volcano.sh/apis/pkg/apis/scheduling/v1beta1"
)

// NetworkTopologySpecApplyConfiguration represents a declarative configuration of the NetworkTopologySpec type for use
// with apply.
type NetworkTopologySpecApplyConfiguration struct {
	Mode               *v1beta1.NetworkTopologyMode `json:"mode,omitempty"`
	HighestTierAllowed *int                         `json:"highestTierAllowed,omitempty"`
}

// NetworkTopologySpecApplyConfiguration constructs a declarative configuration of the NetworkTopologySpec type for use with
// apply.
func NetworkTopologySpec() *NetworkTopologySpecApplyConfiguration {
	return &NetworkTopologySpecApplyConfiguration{}
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *NetworkTopologySpecApplyConfiguration) WithMode(value v1beta1.NetworkTopologyMode) *NetworkTopologySpecApplyConfiguration {
	b.Mode = &value
	return b
}

// WithHighestTierAllowed sets the HighestTierAllowed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HighestTierAllowed field is set to the value of the last call.
func (b *NetworkTopologySpecApplyConfiguration) WithHighestTierAllowed(value int) *NetworkTopologySpecApplyConfiguration {
	b.HighestTierAllowed = &value
	return b
}
