/*
Copyright 2021 The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "volcano.sh/apis/pkg/apis/nodeinfo/v1alpha1"
)

// NumatopoLister helps list Numatopos.
// All objects returned here must be treated as read-only.
type NumatopoLister interface {
	// List lists all Numatopos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Numatopo, err error)
	// Numatopos returns an object that can list and get Numatopos.
	Numatopos(namespace string) NumatopoNamespaceLister
	NumatopoListerExpansion
}

// numatopoLister implements the NumatopoLister interface.
type numatopoLister struct {
	indexer cache.Indexer
}

// NewNumatopoLister returns a new NumatopoLister.
func NewNumatopoLister(indexer cache.Indexer) NumatopoLister {
	return &numatopoLister{indexer: indexer}
}

// List lists all Numatopos in the indexer.
func (s *numatopoLister) List(selector labels.Selector) (ret []*v1alpha1.Numatopo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Numatopo))
	})
	return ret, err
}

// Numatopos returns an object that can list and get Numatopos.
func (s *numatopoLister) Numatopos(namespace string) NumatopoNamespaceLister {
	return numatopoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NumatopoNamespaceLister helps list and get Numatopos.
// All objects returned here must be treated as read-only.
type NumatopoNamespaceLister interface {
	// List lists all Numatopos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Numatopo, err error)
	// Get retrieves the Numatopo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Numatopo, error)
	NumatopoNamespaceListerExpansion
}

// numatopoNamespaceLister implements the NumatopoNamespaceLister
// interface.
type numatopoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Numatopos in the indexer for a given namespace.
func (s numatopoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Numatopo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Numatopo))
	})
	return ret, err
}

// Get retrieves the Numatopo from the indexer for a given namespace and name.
func (s numatopoNamespaceLister) Get(name string) (*v1alpha1.Numatopo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("numatopo"), name)
	}
	return obj.(*v1alpha1.Numatopo), nil
}
